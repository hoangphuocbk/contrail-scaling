heat_template_version: 2015-04-30

description: Autoscaling Contrail Cloud HOT

parameters:
  virtual_network_1:
    type: string
    description: mgmt_virtual_network for the ServiceInstance
  virtual_network_1_fqdn:
    type: string
    description: mgmt_virtual_network for the ServiceInstance
  virtual_network_2:
    type: string
    description: left_virtual_network for the ServiceInstance
  virtual_network_2_fqdn:
    type: string
    description: mgmt_virtual_network for the ServiceInstance
  image:
    type: string
    description: Name of the image
  flavor:
    type: string
    description: Flavor
  service_instance_name:
    type: string
    label: Service instance fq name
    description: Service instance for port tuple
  service_interface_type_1:
    type: string
    description: service_interface_type for the ServiceTemplate
  service_interface_type_2:
    type: string
    description: service_interface_type for the ServiceTemplate
  port_tuple_name:
    type: string
    description: name of Port Tuple

resources:
  template_PortTuple:
    type: OS::ContrailV2::PortTuple
    properties:
      name: { get_param: port_tuple_name }
      service_instance: { get_param: service_instance_name }

  template_VirtualMachineInterface_1:
    type: OS::ContrailV2::VirtualMachineInterface
    depends_on: [ template_PortTuple ]
    properties:
      name: { get_param: virtual_network_1 }
      virtual_machine_interface_properties:
        {
          virtual_machine_interface_properties_service_interface_type: { get_param: service_interface_type_1 },
        }
      port_tuple_refs: [{ get_resource: template_PortTuple }]
      virtual_network_refs: [{ get_param: virtual_network_1_fqdn }]

  template_VirtualMachineInterface_2:
    type: OS::ContrailV2::VirtualMachineInterface
    depends_on: [ template_PortTuple ]
    properties:
      name: { get_param: virtual_network_2 }
      virtual_machine_interface_properties:
        {
          virtual_machine_interface_properties_service_interface_type: { get_param: service_interface_type_2 },
        }
      port_tuple_refs: [{ get_resource: template_PortTuple }]
      virtual_network_refs: [{ get_param: virtual_network_2_fqdn }]

  template_InstanceIp_1:
    type: OS::ContrailV2::InstanceIp
    depends_on: [ template_VirtualMachineInterface_1 ]
    properties:
      name: { get_param: virtual_network_1 }
      virtual_machine_interface_refs: [{ get_resource: template_VirtualMachineInterface_1 }]
      virtual_network_refs: [{ get_param: virtual_network_1_fqdn }]

  template_InstanceIp_2:
    type: OS::ContrailV2::InstanceIp
    depends_on: [ template_VirtualMachineInterface_2 ]
    properties:
      name: { get_param: virtual_network_2 }
      virtual_machine_interface_refs: [{ get_resource: template_VirtualMachineInterface_2 }]
      virtual_network_refs: [{ get_param: virtual_network_2_fqdn }]

  instance:
    type: OS::Nova::Server
    depends_on: [ template_InstanceIp_1, template_InstanceIp_2 ]
    properties:
      name:
      image: { get_param:  image }
      flavor: { get_param: flavor }
      networks:
        - port: { get_resource: template_VirtualMachineInterface_1 }
        - port: { get_resource: template_VirtualMachineInterface_2 }
      user_data_format: RAW
      user_data: |
        #!/bin/sh

        # Update new password and allow connecting by password
        echo -e "a\na" | passwd centos
        sed -i "/^[^#]*PasswordAuthentication[[:space:]]no/c\PasswordAuthentication yes" /etc/ssh/sshd_config
        sed -i "s/^#Port 22/Port 8922/" /etc/ssh/sshd_config
        semanage port -a -t ssh_port_t -p tcp 8922
        systemctl restart sshd.service

        # Enable network interfaces
        cat << EOL >> /etc/sysconfig/network-scripts/ifcfg-eth1
        DEVICE=eth1
        BOOTPROTO=dhcp
        TYPE=Ethernet
        ONBOOT=yes
        EOL
        ifconfig eth1 up

        cat << EOL >> /etc/sysconfig/network-scripts/ifcfg-eth2
        DEVICE=eth2
        BOOTPROTO=dhcp
        TYPE=Ethernet
        ONBOOT=yes
        EOL
        ifconfig eth2 up
        systemctl restart network

        # Create bridge between 2 network interfaces
        ip link add name br0 type bridge
        ip link set dev br0 up
        ip link set dev eth0 master br0
        ip link set dev eth1 master br0

